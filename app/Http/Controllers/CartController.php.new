<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Models\Product;
use App\Services\CartService;

class CartController extends Controller
{
    /**
     * The cart service instance.
     *
     * @var CartService
     */
    protected $cartService;

    /**
     * Create a new controller instance.
     *
     * @param CartService $cartService
     */
    public function __construct(CartService $cartService)
    {
        $this->cartService = $cartService;
    }

    /**
     * Add a product to the cart.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function add(Request $request)
    {
        $result = $this->cartService->addToCart($request);

        if ($result['success']) {
            return response()->json([
                'success' => true,
                'count' => $result['count']
            ]);
        }

        return response()->json(['error' => $result['error']], $result['status']);
    }

    /**
     * Get the count of items in the cart.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function count()
    {
        return response()->json(['count' => $this->cartService->getCartCount()]);
    }

    /**
     * View the cart contents for UTM vendor.
     *
     * @return \Illuminate\View\View
     */
    public function view()
    {
        $cart = $this->cartService->filterCartByVendor(1); // Filter to UTM Mart (vendor_id = 1)

        // Store filtered cart in session
        session()->put('cart', $cart);

        // Flash message if items were filtered out
        if (count($cart) < count($this->cartService->getCart())) {
            session()->flash('info', 'Only UTM Mart products are shown in your cart. Products from other vendors have been removed.');
        }

        return view('Check-out', ['cart' => $cart]);
    }

    /**
     * View the main cart page for UTM vendor.
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        $cart = $this->cartService->filterCartByVendor(1); // Filter to UTM Mart (vendor_id = 1)

        // Store filtered cart in session
        session()->put('cart', $cart);

        // Flash message if items were filtered out
        if (count($cart) < count($this->cartService->getCart())) {
            session()->flash('info', 'Only UTM Mart products are shown in your cart. Products from other vendors have been removed.');
        }

        return view('cart', ['cart' => $cart]);
    }

    /**
     * View the cart contents for Richiamo Caffe vendor.
     *
     * @return \Illuminate\View\View
     */
    public function viewCart()
    {
        $cart = $this->cartService->filterCartByVendor(2); // Filter to Richiamo Caffe (vendor_id = 2)

        // Store filtered cart in session
        session()->put('cart', $cart);

        // Flash message if items were filtered out
        if (count($cart) < count($this->cartService->getCart())) {
            session()->flash('info', 'Only Richiamo Caffe products are shown in your cart. Products from other vendors have been removed.');
        }

        return view('vendor2.Check-out', ['cart' => $cart]);
    }

    /**
     * Remove a product from the cart.
     *
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function remove(Request $request)
    {
        $id = $request->product_id;
        $cart = session()->get('cart', []);

        // Handle both new and old format cart items
        if (isset($cart[$id])) {
            // Old format
            $this->cartService->removeCartItem($id);
        } else {
            // New format - look for vendor_id-product_id pattern
            foreach ($cart as $key => $item) {
                // Match either the product_id field or extract from composite key
                if ((isset($item['product_id']) && $item['product_id'] == $id) ||
                    (is_string($key) && strpos($key, '-') !== false && explode('-', $key)[1] == $id)) {
                    $this->cartService->removeCartItem($key);
                    break;
                }
            }
        }

        return redirect()->back()->with('success', 'Product removed from cart.');
    }

    /**
     * Clear the cart.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function clear()
    {
        session()->forget('cart');
        session()->forget('coupon');
        return response()->json(['success' => true]);
    }

    /**
     * Clear all products except for the specified vendor.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function clearOtherVendors(Request $request)
    {
        $currentVendor = $request->vendor;
        $vendorId = null;

        // Map vendor type to vendor ID
        if ($currentVendor === 'vendor2' || $currentVendor === 'richiamo') {
            $vendorId = 2; // Richiamo Caffe
        } elseif ($currentVendor === 'vendor3' || $currentVendor === 'print') {
            $vendorId = 3; // Setepak Printing
        } elseif ($currentVendor === 'utm') {
            $vendorId = 1; // UTM Mart
        }

        if ($vendorId) {
            $filteredCart = $this->cartService->filterCartByVendor($vendorId);

            // Clear session and set filtered cart
            session()->forget('cart');
            session()->forget('coupon');

            if (!empty($filteredCart)) {
                session(['cart' => $filteredCart]);
            }

            return response()->json(['success' => true, 'count' => count($filteredCart)]);
        }

        return response()->json(['success' => false, 'error' => 'Invalid vendor']);
    }
}
